import cv2
import numpy as np
from matplotlib import pyplot as plt
# 1、最邻近插值

def function(img):
    height, width, channels = img.shape
    emptyImage = np.zeros((700, 700, channels), np.uint8)
    sh = 700/height
    sw = 700/width
    for i in range(700):
        for j in range(700):
            x = int(i/sh)
            y = int(j/sw)
            emptyImage[i, j] = img[x, y]
    return emptyImage

img = cv2.imread('lenna.png')
zoom = function(img)
cv2.imshow("zoom", zoom)


# 2、双线性插值：

def bilinear_interpolation(img, out_dim):
    src_h, src_w, channel = img.shape
    dst_h, dst_w = out_dim[0], out_dim[1]
    print("src_h, src_w = ", src_h, src_w)
    print("dst_h, dst_w = ", dst_h, dst_w)
    if src_h == dst_h and src_w == dst_w:
        return img.copy()
    dst_img = np.zeros((dst_h, dst_w, 3), dtype=np.uint8)
    scale_x, scale_y = float(src_w) / dst_w, float(src_h) / dst_h
    for i in range(3):
        for dst_y in range(dst_h):
            for dst_x in range(dst_w):
                src_x = (dst_x+0.5) * scale_x-0.5
                src_y = (dst_y+0.5) * scale_y-0.5

                src_x0 = int(np.floor(src_x))
                src_x1 = min(src_x0+1, src_w-1)
                src_y0 = int(np.floor(src_y))
                src_y1 = min(src_y0+1, src_h-1)

                temp0 = (src_x1 - src_x) * img[src_y0, src_x0, i] + (src_x - src_x0) * img[src_y0, src_x0, i]
                temp1 = (src_x1 - src_x) * img[src_y0, src_x0, i] + (src_x - src_x0) * img[src_y0, src_x0, i]
                dst_img[dst_y, dst_x , i] = int((src_y1  - src_y ) * temp0 + (src_y - src_y0) * temp1)

    return dst_img
img = cv2.imread('lenna.png')
dst = bilinear_interpolation(img, (700, 700))
cv2.imshow('bilinear interp', dst)
cv2.waitKey(0)

# 3、中心重叠



# 4、直方图均衡化

img = cv2.imread('lenna.png', 1)
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
cv2.imshow('image_gray', gray)

# 灰度图像方法一
plt.figure()
plt.hist(gray.ravel(), 256)
plt.show()

# 获取灰度图像
img = cv2.imread('lenna.png', 1)
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# 灰度图像直方图均衡化
dst = cv2.equalizeHist(gray)

# 直方图
hist = cv2.calcHist([dst], [0], None, [256], [0, 256])

plt.figure()
plt.hist(dst.ravel(), 256)
plt.show()

cv2.imshow('Histogram Equalization', np.hstack([gray, dst]))
cv2.waitKey(0)


# 彩色直方图均衡化
img = cv2.imread('lenna.png', 1)
cv2.imshow('src', img)

# 彩色直方图均衡化，需要分解通道 对每个通道均衡化
(b, g, r) = cv2.split(img)
bH = cv2.equalizeHist(b)
gH = cv2.equalizeHist(g)
rH = cv2.equalizeHist(r)
# 合并每个通道
result = cv2.merge((bH, gH, rH))
cv2.imshow("dst_rgb", result)
cv2.waitKey(0)
